---
// Color Picker Component for DocyUI
export interface Props {
  selectedColor?: string;
  className?: string;
}

const { selectedColor = 'slate', className = '' } = Astro.props;

// DocyUI color palettes
const colorPalettes = [
  { name: 'slate', label: 'Slate', preview: '#64748b' },
  { name: 'zinc', label: 'Zinc', preview: '#71717a' },
  { name: 'stone', label: 'Stone', preview: '#78716c' },
  { name: 'gray', label: 'Gray', preview: '#6b7280' },
  { name: 'neutral', label: 'Neutral', preview: '#737373' },
  { name: 'blue', label: 'Blue', preview: '#3b82f6' },
  { name: 'green', label: 'Green', preview: '#10b981' },
  { name: 'orange', label: 'Orange', preview: '#f97316' },
  { name: 'red', label: 'Red', preview: '#ef4444' },
  { name: 'rose', label: 'Rose', preview: '#f43f5e' },
  { name: 'violet', label: 'Violet', preview: '#8b5cf6' },
];
---

<div class={`color-picker ${className}`}>
  <div class="space-y-4">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-heading font-semibold">Color Palette</h3>
      <span class="text-sm text-muted-foreground">
        Selected: <span class="font-medium text-foreground capitalize">{selectedColor}</span>
      </span>
    </div>
    
    <div class="grid grid-cols-3 gap-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-11">
      {colorPalettes.map((color) => (
        <button
          class={`color-option relative flex flex-col items-center gap-2 p-3 rounded-lg border transition-all hover:scale-105 ${
            selectedColor === color.name 
              ? 'border-ring ring-2 ring-ring ring-offset-2 ring-offset-background' 
              : 'border-border hover:border-ring'
          }`}
          data-color={color.name}
          title={`Switch to ${color.label} theme`}
        >
          <div 
            class="h-8 w-8 rounded-full border-2 border-white shadow-sm"
            style={`background-color: ${color.preview}`}
          />
          <span class="text-xs font-medium text-center leading-tight">
            {color.label}
          </span>
          {selectedColor === color.name && (
            <div class="absolute -top-1 -right-1 h-4 w-4 rounded-full bg-primary flex items-center justify-center">
              <svg class="h-2.5 w-2.5 text-primary-foreground" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </div>
          )}
        </button>
      ))}
    </div>
    
    <div class="rounded-lg border bg-muted/50 p-4">
      <div class="flex items-center gap-2 mb-2">
        <div class="h-4 w-4 rounded bg-primary"></div>
        <span class="text-sm font-medium">Primary Color Preview</span>
      </div>
      <p class="text-sm text-muted-foreground">
        This shows how the primary color will look with the selected palette.
      </p>
    </div>
  </div>
</div>

<script>
  class ColorPicker {
    constructor(element) {
      this.element = element;
      this.colorOptions = element.querySelectorAll('.color-option');
      this.currentColor = this.loadStoredColor() || 'slate';
      
      this.init();
    }
    
    loadStoredColor() {
      try {
        return localStorage.getItem('docyui-color-palette');
      } catch (e) {
        return null;
      }
    }
    
    init() {
      // Apply stored color on initialization
      if (this.currentColor !== 'slate') {
        this.applyColorPalette(this.currentColor);
        this.updateSelection(this.currentColor);
      }
      
      this.colorOptions.forEach(option => {
        option.addEventListener('click', (e) => {
          this.selectColor(e.currentTarget.dataset.color);
        });
      });
    }
    
    selectColor(colorName) {
      if (colorName === this.currentColor) return;
      
      // Apply color palette to document
      this.applyColorPalette(colorName);
      
      // Update visual state
      this.updateSelection(colorName);
      
      // Store selection
      localStorage.setItem('docyui-color-palette', colorName);
      
      // Dispatch color change event
      const event = new CustomEvent('colorchange', {
        detail: { color: colorName },
        bubbles: true
      });
      this.element.dispatchEvent(event);
      
      // Update current color
      this.currentColor = colorName;
      
      // Show feedback
      this.showFeedback(colorName);
    }
    
    applyColorPalette(colorName) {
      const root = document.documentElement;
      
      // Define color palettes based on ShadCN color system
      const palettes = {
        slate: {
          '--primary': '215.4 16.3% 46.9%',
          '--primary-foreground': '210 40% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '222.2 84% 4.9%',
          '--secondary': '210 40% 96%',
          '--secondary-foreground': '222.2 84% 4.9%',
          '--muted': '210 40% 96%',
          '--muted-foreground': '215.4 16.3% 46.9%',
          '--accent': '210 40% 96%',
          '--accent-foreground': '222.2 84% 4.9%',
          '--ring': '215.4 16.3% 46.9%',
        },
        zinc: {
          '--primary': '240 3.8% 46.1%',
          '--primary-foreground': '0 0% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '240 5.9% 10%',
          '--secondary': '240 4.8% 95.9%',
          '--secondary-foreground': '240 5.9% 10%',
          '--muted': '240 4.8% 95.9%',
          '--muted-foreground': '240 3.8% 46.1%',
          '--accent': '240 4.8% 95.9%',
          '--accent-foreground': '240 5.9% 10%',
          '--ring': '240 3.8% 46.1%',
        },
        stone: {
          '--primary': '25 5.3% 44.7%',
          '--primary-foreground': '60 9.1% 97.8%',
          '--card': '0 0% 100%',
          '--card-foreground': '24 9.8% 10%',
          '--secondary': '60 4.8% 95.9%',
          '--secondary-foreground': '24 9.8% 10%',
          '--muted': '60 4.8% 95.9%',
          '--muted-foreground': '25 5.3% 44.7%',
          '--accent': '60 4.8% 95.9%',
          '--accent-foreground': '24 9.8% 10%',
          '--ring': '25 5.3% 44.7%',
        },
        gray: {
          '--primary': '0 0% 45.1%',
          '--primary-foreground': '0 0% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '0 0% 9%',
          '--secondary': '0 0% 96.1%',
          '--secondary-foreground': '0 0% 9%',
          '--muted': '0 0% 96.1%',
          '--muted-foreground': '0 0% 45.1%',
          '--accent': '0 0% 96.1%',
          '--accent-foreground': '0 0% 9%',
          '--ring': '0 0% 45.1%',
        },
        neutral: {
          '--primary': '0 0% 45.1%',
          '--primary-foreground': '0 0% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '0 0% 9%',
          '--secondary': '0 0% 96.1%',
          '--secondary-foreground': '0 0% 9%',
          '--muted': '0 0% 96.1%',
          '--muted-foreground': '0 0% 45.1%',
          '--accent': '0 0% 96.1%',
          '--accent-foreground': '0 0% 9%',
          '--ring': '0 0% 45.1%',
        },
        blue: {
          '--primary': '221.2 83.2% 53.3%',
          '--primary-foreground': '210 40% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '222.2 84% 4.9%',
          '--secondary': '210 40% 96%',
          '--secondary-foreground': '222.2 84% 4.9%',
          '--muted': '210 40% 96%',
          '--muted-foreground': '215.4 16.3% 46.9%',
          '--accent': '210 40% 96%',
          '--accent-foreground': '222.2 84% 4.9%',
          '--ring': '221.2 83.2% 53.3%',
        },
        green: {
          '--primary': '142.1 76.2% 36.3%',
          '--primary-foreground': '355.7 100% 97.3%',
          '--card': '0 0% 100%',
          '--card-foreground': '222.2 84% 4.9%',
          '--secondary': '210 40% 96%',
          '--secondary-foreground': '222.2 84% 4.9%',
          '--muted': '210 40% 96%',
          '--muted-foreground': '215.4 16.3% 46.9%',
          '--accent': '210 40% 96%',
          '--accent-foreground': '222.2 84% 4.9%',
          '--ring': '142.1 76.2% 36.3%',
        },
        orange: {
          '--primary': '24.6 95% 53.1%',
          '--primary-foreground': '60 9.1% 97.8%',
          '--card': '0 0% 100%',
          '--card-foreground': '24 9.8% 10%',
          '--secondary': '60 4.8% 95.9%',
          '--secondary-foreground': '24 9.8% 10%',
          '--muted': '60 4.8% 95.9%',
          '--muted-foreground': '25 5.3% 44.7%',
          '--accent': '60 4.8% 95.9%',
          '--accent-foreground': '24 9.8% 10%',
          '--ring': '24.6 95% 53.1%',
        },
        red: {
          '--primary': '0 84.2% 60.2%',
          '--primary-foreground': '0 0% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '0 0% 9%',
          '--secondary': '0 0% 96.1%',
          '--secondary-foreground': '0 0% 9%',
          '--muted': '0 0% 96.1%',
          '--muted-foreground': '0 0% 45.1%',
          '--accent': '0 0% 96.1%',
          '--accent-foreground': '0 0% 9%',
          '--ring': '0 84.2% 60.2%',
        },
        rose: {
          '--primary': '330 81.2% 60.4%',
          '--primary-foreground': '0 0% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '0 0% 9%',
          '--secondary': '0 0% 96.1%',
          '--secondary-foreground': '0 0% 9%',
          '--muted': '0 0% 96.1%',
          '--muted-foreground': '0 0% 45.1%',
          '--accent': '0 0% 96.1%',
          '--accent-foreground': '0 0% 9%',
          '--ring': '330 81.2% 60.4%',
        },
        violet: {
          '--primary': '262.1 83.3% 57.8%',
          '--primary-foreground': '210 40% 98%',
          '--card': '0 0% 100%',
          '--card-foreground': '222.2 84% 4.9%',
          '--secondary': '210 40% 96%',
          '--secondary-foreground': '222.2 84% 4.9%',
          '--muted': '210 40% 96%',
          '--muted-foreground': '215.4 16.3% 46.9%',
          '--accent': '210 40% 96%',
          '--accent-foreground': '222.2 84% 4.9%',
          '--ring': '262.1 83.3% 57.8%',
        },
      };
      
      const palette = palettes[colorName];
      if (palette) {
        Object.entries(palette).forEach(([property, value]) => {
          root.style.setProperty(property, value);
        });
      }
    }
    
    updateSelection(colorName) {
      // Remove previous selection
      this.colorOptions.forEach(option => {
        option.classList.remove('border-ring', 'ring-2', 'ring-ring', 'ring-offset-2', 'ring-offset-background');
        option.classList.add('border-border');
        const checkmark = option.querySelector('.absolute');
        if (checkmark) checkmark.remove();
      });
      
      // Add new selection
      const selectedOption = this.element.querySelector(`[data-color="${colorName}"]`);
      if (selectedOption) {
        selectedOption.classList.remove('border-border');
        selectedOption.classList.add('border-ring', 'ring-2', 'ring-ring', 'ring-offset-2', 'ring-offset-background');
        
        // Add checkmark
        const checkmark = document.createElement('div');
        checkmark.className = 'absolute -top-1 -right-1 h-4 w-4 rounded-full bg-primary flex items-center justify-center';
        checkmark.innerHTML = `
          <svg class="h-2.5 w-2.5 text-primary-foreground" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        `;
        selectedOption.appendChild(checkmark);
      }
      
      // Update selected text
      const selectedText = this.element.querySelector('.text-foreground.capitalize');
      if (selectedText) {
        selectedText.textContent = colorName;
      }
    }
    
    showFeedback(colorName) {
      // Create temporary feedback element
      const feedback = document.createElement('div');
      feedback.className = 'fixed top-4 right-4 bg-primary text-primary-foreground px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
      feedback.textContent = `Switched to ${colorName.charAt(0).toUpperCase() + colorName.slice(1)} theme`;
      
      document.body.appendChild(feedback);
      
      // Animate in
      setTimeout(() => {
        feedback.classList.remove('translate-x-full');
      }, 10);
      
      // Remove after 3 seconds
      setTimeout(() => {
        feedback.classList.add('translate-x-full');
        setTimeout(() => {
          if (feedback.parentNode) {
            feedback.parentNode.removeChild(feedback);
          }
        }, 300);
      }, 3000);
    }
  }
  
  // Auto-initialize color pickers
  function initColorPickers() {
    const pickers = document.querySelectorAll('.color-picker:not([data-initialized])');
    pickers.forEach(picker => {
      picker.dataset.initialized = 'true';
      new ColorPicker(picker);
    });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initColorPickers);
  } else {
    initColorPickers();
  }
  
  // Re-initialize when new content is loaded
  const observer = new MutationObserver(() => {
    initColorPickers();
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
</script>

<style>
  @reference "../styles/global.css";
  
  .color-option {
    @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2;
  }
  
  .color-option:hover {
    @apply shadow-md;
  }
  
  .color-option:active {
    @apply scale-95;
  }
</style>