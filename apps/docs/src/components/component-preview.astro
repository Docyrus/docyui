---
// Component Preview with React/Vue islands
import DynamicComponent from './dynamic-component.astro';
import { getComponent } from '../lib/registry';

export interface Props {
  name: string;
  variant?: string;
  description?: string;
  className?: string;
}

const { name, variant = 'default', description, className = '' } = Astro.props;

// Get component metadata from registry
const reactComponent = getComponent(name, 'react');
const vueComponent = getComponent(name, 'vue');

// Component availability check - silently handle missing components

// Get examples from registry dynamically
const component = reactComponent || vueComponent;

let componentExamples: Array<{name: string; variants: Record<string, string>; description: string}> = [];

if (variant !== 'default') {
  // Single variant mode - create example with specified variant
  const variantValues: Record<string, string> = {};
  
  // Find the variant in any available variant type
  if (component?.variants) {
    Object.keys(component.variants).forEach(variantType => {
      const variantOption = component.variants[variantType]?.find((v: any) => v.key === variant);
      if (variantOption) {
        variantValues[variantType] = variant;
      }
    });
  }
  
  componentExamples = [{ 
    name: variant, 
    variants: variantValues, 
    description: `${variant} variant` 
  }];
} else {
  // All variants mode - show default variants from registry
  const defaultVariants: Record<string, string> = {};
  
  // Get default variants from component definition
  if (component?.variants) {
    Object.keys(component.variants).forEach(variantType => {
      const variants = component.variants[variantType];
      if (variants && variants.length > 0) {
        // Find default variant or use first one
        const defaultVariant = variants.find((v: any) => v.key === 'default') || variants[0];
        if (defaultVariant) {
          defaultVariants[variantType] = defaultVariant.key;
        }
      }
    });
  }
  
  componentExamples = [{ 
    name: 'default', 
    variants: defaultVariants, 
    description: 'Default' 
  }];
}

// Generate code examples dynamically
const generateCodeExamples = () => {
  const componentName = component?.componentName || name.charAt(0).toUpperCase() + name.slice(1);
  
  // Create example code based on first example
  const firstExample = componentExamples[0];
  let propsString = '';
  
  if (firstExample && Object.keys(firstExample.variants).length > 0) {
    const propPairs = Object.entries(firstExample.variants)
      .map(([key, value]) => `${key}="${value}"`)
      .join(' ');
    propsString = ` ${propPairs}`;
  }
  
  const reactImport = reactComponent?.usage?.import || `import { ${componentName} } from "@/components/ui/${name}"`;
  const vueImport = vueComponent?.usage?.import || `import ${componentName} from "@/components/ui/${name}.vue"`;
  
  const reactUsage = `<${componentName}${propsString}>${componentName}</${componentName}>`;
  const vueUsage = `<${componentName}${propsString}>${componentName}</${componentName}>`;
  
  return {
    react: `${reactImport}

export default function Component() {
  return (
    ${reactUsage}
  )
}`,
    vue: `<template>
  ${vueUsage}
</template>

<script setup>
${vueImport}
</script>`
  };
};

const codeExamples = generateCodeExamples();
const reactCode = codeExamples.react;
const vueCode = codeExamples.vue;

// HTML escape function
const escapeHtml = (text: string) => {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
};
---

<div class={`component-preview ${className}`}>
  <div class="space-y-4">
    {description && (
      <p class="text-sm text-muted-foreground">{description}</p>
    )}
    
    <div class="relative overflow-hidden rounded border bg-background">
      <!-- Tab Navigation -->
      <div class="flex items-center border-b bg-muted/50">
        <button class="preview-tab px-4 py-2 text-sm font-medium text-foreground bg-background border-b-2 border-primary" data-tab="preview">
          Preview
        </button>
        <button class="preview-tab px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground transition-colors" data-tab="code">
          Code
        </button>
      </div>
      
      <!-- Preview Content -->
      <div class="preview-content-area" data-tab="preview">
        <div class="preview-area h-[200px] flex items-center justify-center p-8 bg-gradient-to-br from-background to-muted/20">
          <!-- React Preview -->
          <div class="preview-content" data-framework="react">
            {reactComponent ? (
              <div id={`react-preview-${name}`} class="flex items-center justify-center gap-4">
                {componentExamples.map((example) => (
                  <DynamicComponent 
                    name={name}
                    framework="react"
                    {...example.variants}
                  />
                ))}
              </div>
            ) : (
              <div class="text-muted-foreground text-sm">
                This component is not available for React
              </div>
            )}
          </div>
          
          <!-- Vue Preview -->
          <div class="preview-content hidden" data-framework="vue">
            {vueComponent ? (
              <div id={`vue-preview-${name}`} class="flex items-center justify-center gap-4">
                {componentExamples.map((example) => (
                  <DynamicComponent 
                    name={name}
                    framework="vue"
                    {...example.variants}
                  />
                ))}
              </div>
            ) : (
              <div class="text-muted-foreground text-sm">
                This component is not available for Vue
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Code Content -->
      <div class="preview-content-area hidden" data-tab="code">
        <div class="framework-content" data-framework="react">
          {reactComponent ? (
            <div class="relative h-[200px]">
              <div class="bg-muted p-4 h-full overflow-y-auto">
                <pre class="text-sm overflow-x-auto"><code set:html={escapeHtml(reactCode)}></code></pre>
              </div>
              <button class="copy-button absolute top-2 right-2 p-2 text-xs bg-background border rounded hover:bg-muted transition-colors">
                <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                  <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
                </svg>
              </button>
            </div>
          ) : (
            <div class="h-[200px] flex items-center justify-center">
              <div class="text-muted-foreground text-sm">
                This component is not available for React
              </div>
            </div>
          )}
        </div>
        <div class="framework-content hidden" data-framework="vue">
          {vueComponent ? (
            <div class="relative h-[200px]">
              <div class="bg-muted p-4 h-full overflow-y-auto">
                <pre class="text-sm overflow-x-auto"><code set:html={escapeHtml(vueCode)}></code></pre>
              </div>
              <button class="copy-button absolute top-2 right-2 p-2 text-xs bg-background border rounded hover:bg-muted transition-colors">
                <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                  <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
                </svg>
              </button>
            </div>
          ) : (
            <div class="h-[200px] flex items-center justify-center">
              <div class="text-muted-foreground text-sm">
                This component is not available for Vue
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class ComponentPreview {
    element: HTMLElement;
    previewContents: NodeListOf<Element>;
    frameworkContents: NodeListOf<Element>;
    previewTabs: NodeListOf<Element>;
    previewContentAreas: NodeListOf<Element>;
    copyButtons: NodeListOf<Element>;
    currentFramework: string;
    currentTab: string;
    
    constructor(element: HTMLElement) {
      this.element = element;
      this.previewContents = element.querySelectorAll('.preview-content');
      this.frameworkContents = element.querySelectorAll('.framework-content');
      this.previewTabs = element.querySelectorAll('.preview-tab');
      this.previewContentAreas = element.querySelectorAll('.preview-content-area');
      this.copyButtons = element.querySelectorAll('.copy-button');
      this.currentFramework = document.documentElement.dataset.framework || 'react';
      this.currentTab = 'preview';
      
      this.init();
    }
    
    init(): void {
      // Listen for framework changes
      document.addEventListener('frameworkchange', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.switchFramework(customEvent.detail.framework);
      });
      
      // Set initial framework
      this.switchFramework(this.currentFramework);
      
      // Add tab functionality
      this.previewTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const tabEl = tab as HTMLElement;
          this.switchTab(tabEl.dataset.tab || '');
        });
      });
      
      // Add copy functionality
      this.copyButtons.forEach(button => {
        button.addEventListener('click', () => {
          this.copyCode(button as HTMLElement);
        });
      });
    }
    
    switchFramework(framework: string): void {
      this.currentFramework = framework;
      
      // Switch preview content
      this.previewContents.forEach(content => {
        const contentEl = content as HTMLElement;
        const contentFramework = contentEl.dataset.framework;
        if (contentFramework === framework) {
          contentEl.classList.remove('hidden');
        } else {
          contentEl.classList.add('hidden');
        }
      });
      
      // Switch framework content
      this.frameworkContents.forEach(content => {
        const contentEl = content as HTMLElement;
        const contentFramework = contentEl.dataset.framework;
        if (contentFramework === framework) {
          contentEl.classList.remove('hidden');
        } else {
          contentEl.classList.add('hidden');
        }
      });
    }
    
    switchTab(tab: string): void {
      this.currentTab = tab;
      
      // Update tab buttons
      this.previewTabs.forEach(tabBtn => {
        const tabBtnEl = tabBtn as HTMLElement;
        if (tabBtnEl.dataset.tab === tab) {
          tabBtnEl.classList.add('text-foreground', 'bg-background', 'border-b-2', 'border-primary');
          tabBtnEl.classList.remove('text-muted-foreground');
        } else {
          tabBtnEl.classList.remove('text-foreground', 'bg-background', 'border-b-2', 'border-primary');
          tabBtnEl.classList.add('text-muted-foreground');
        }
      });
      
      // Update content areas
      this.previewContentAreas.forEach(area => {
        const areaEl = area as HTMLElement;
        if (areaEl.dataset.tab === tab) {
          areaEl.classList.remove('hidden');
        } else {
          areaEl.classList.add('hidden');
        }
      });
    }
    
    copyCode(button: HTMLElement): void {
      const codeBlock = button.parentElement?.querySelector('code') as HTMLElement;
      if (codeBlock) {
        const text = codeBlock.textContent || '';
        navigator.clipboard.writeText(text).then(() => {
          // Show success feedback
          const originalContent = button.innerHTML;
          button.innerHTML = `
            <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 6 9 17l-5-5"/>
            </svg>
          `;
          
          setTimeout(() => {
            button.innerHTML = originalContent;
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy code:', err);
        });
      }
    }
  }
  
  // Auto-initialize component previews
  function initComponentPreviews(): void {
    const previews = document.querySelectorAll('.component-preview:not([data-initialized])');
    previews.forEach(preview => {
      const previewEl = preview as HTMLElement;
      previewEl.dataset.initialized = 'true';
      new ComponentPreview(previewEl);
    });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initComponentPreviews);
  } else {
    initComponentPreviews();
  }
  
  // Re-initialize when new content is loaded
  const observer = new MutationObserver(() => {
    initComponentPreviews();
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
</script>

<style>
  @reference "../styles/global.css";

  .preview-area {
    @apply bg-muted/50;
  }
  
  .preview-tab {
    @apply transition-colors duration-200;
  }
  
  .copy-button {
    @apply transition-colors duration-200;
  }
  
  .copy-button:hover {
    @apply bg-muted;
  }
</style>